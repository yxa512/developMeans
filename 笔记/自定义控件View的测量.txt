protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {  
   super.onMeasure(widthMeasureSpec, heightMeasureSpec);  
   int measureWidth = MeasureSpec.getSize(widthMeasureSpec);  
   int measureHeight = MeasureSpec.getSize(heightMeasureSpec);  
   int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);  
   int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);  
  
  
   int lineWidth = 0;  
   int lineHeight = 0;  
   int height = 0;  
   int width = 0;  
   int count = getChildCount();  
   for (int i=0;i<count;i++){  
       View child = getChildAt(i);  
       measureChild(child,widthMeasureSpec,heightMeasureSpec);  
         
       MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();  
       int childWidth = child.getMeasuredWidth() + lp.leftMargin +lp.rightMargin;  
       int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;  
  
       if (lineWidth + childWidth > measureWidth){  
           //需要换行  
           width = Math.max(lineWidth,width);  
           height += lineHeight;  
           //因为由于盛不下当前控件，而将此控件调到下一行，所以将此控件的高度和宽度初始化给lineHeight、lineWidth  
           lineHeight = childHeight;  
           lineWidth = childWidth;  
       }else{  
           // 否则累加值lineWidth,lineHeight取最大高度  
           lineHeight = Math.max(lineHeight,childHeight);  
           lineWidth += childWidth;  
       }  
  
       //最后一行是不会超出width范围的，所以要单独处理  
       if (i == count -1){  
           height += lineHeight;  
           width = Math.max(width,lineWidth);  
       }  
  
   }  
   //当属性是MeasureSpec.EXACTLY时，那么它的高度就是确定的，  
   // 只有当是wrap_content时，根据内部控件的大小来确定它的大小时，大小是不确定的，属性是AT_MOST,此时，就需要我们自己计算它的应当的大小，并设置进去  
   setMeasuredDimension((measureWidthMode == MeasureSpec.EXACTLY) ? measureWidth  
           : width, (measureHeightMode == MeasureSpec.EXACTLY) ? measureHeight  
           : height);  
}  