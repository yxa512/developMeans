Cursor cursor = this.getContentResolver().query(  
		            MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, null, null, null,  
		                MediaStore.Audio.Media.DEFAULT_SORT_ORDER);  
		 int count = cursor.getCount();
		 Log.i("123", count+"");
		if(count > 0){
	        for (int i = 0;i < count;i ++){
	        	cursor.moveToNext(); 
	        	long id = cursor.getLong(cursor  
	                    .getColumnIndex(MediaStore.Audio.Media._ID)); // 音乐id  
	            String title = cursor.getString((cursor  
	                    .getColumnIndex(MediaStore.Audio.Media.TITLE))); // 音乐标题  
	            String artist = cursor.getString(cursor  
	                    .getColumnIndex(MediaStore.Audio.Media.ARTIST)); // 艺术家  
	            String album = cursor.getString(cursor  
	                    .getColumnIndex(MediaStore.Audio.Media.ALBUM)); // 专辑  
	            String displayName = cursor.getString(cursor  
	                    .getColumnIndex(MediaStore.Audio.Media.DISPLAY_NAME));  // 名称
	            long albumId = cursor.getInt(cursor  
	                    .getColumnIndex(MediaStore.Audio.Media.ALBUM_ID));   // 专辑 id
	            long duration = cursor.getLong(cursor  
	                    .getColumnIndex(MediaStore.Audio.Media.DURATION)); // 时长  
	            long size = cursor.getLong(cursor  
	                    .getColumnIndex(MediaStore.Audio.Media.SIZE)); // 文件大小  
	            String url = cursor.getString(cursor  
	                    .getColumnIndex(MediaStore.Audio.Media.DATA)); // 文件路径  
	            int isMusic = cursor.getInt(cursor  
	                    .getColumnIndex(MediaStore.Audio.Media.IS_MUSIC)); // 是否为音乐 
	            Log.i("123", isMusic+" t"+displayName+" y"+url);
	          
	        }
		}