import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

public class XBitmapFactoryOOM {
	
	private static BitmapFactory.Options opts = new BitmapFactory.Options();
	
	public static Bitmap getNewBitmap(String path){
		   opts.inJustDecodeBounds = true;//7.只把宽，高取回来
           BitmapFactory.decodeFile(path, opts);
           
           opts.inSampleSize = computeSampleSize(opts, -1, 512*512);//缩放倍数 
   	       opts.inJustDecodeBounds = false;
   	 	   opts.inTempStorage = new byte[100 * 1024];//2.为位图设置100K的缓存
       	   opts.inPreferredConfig = Bitmap.Config.RGB_565;//3.设置位图颜色显示优化方式
       	   opts.inPurgeable = true;//4.设置图片可以被回收，创建Bitmap用于存储Pixel的内存空间在系统内存不足时可以被回收
       	   opts.inInputShareable = true; //6.设置解码位图的尺寸信息
           Bitmap bit = BitmapFactory.decodeFile(path, opts);
           //Log.i("bitmap", opts.outWidth+" "+opts.outHeight+" "+opts.inSampleSize);
           return bit;
	}
	
	 /**
	 * 动态计算缩小比例
	 * @param options
	 * @param minSideLength
	 * @param maxNumOfPixels
	 * @return
	 */
	public static int computeSampleSize(BitmapFactory.Options options, int minSideLength, int maxNumOfPixels) {  
	    int initialSize = computeInitialSampleSize(options, minSideLength, maxNumOfPixels);  
	    int roundedSize;  
	    if (initialSize <= 8) {  
	        roundedSize = 1;
	        while (roundedSize < initialSize) {  
	            roundedSize <<= 1;  
	        }  
	    } else {  
	        roundedSize = (initialSize + 7) / 8 * 8;  
	    }  
	    return roundedSize;  
	} 
	/**
	 * 动态计算缩小比例
	 * @param options
	 * @param minSideLength
	 * @param maxNumOfPixels
	 * @return
	 */
	private static int computeInitialSampleSize(BitmapFactory.Options options,int minSideLength, int maxNumOfPixels) {  
	    double w = options.outWidth;  
	    double h = options.outHeight;  
	    int lowerBound = (maxNumOfPixels == -1) ? 1 : (int) Math.ceil(Math.sqrt(w * h / maxNumOfPixels));  
	    int upperBound = (minSideLength == -1) ? 128 :(int) Math.min(Math.floor(w / minSideLength), Math.floor(h / minSideLength));  
	    if (upperBound < lowerBound) {  
	        // return the larger one when there is no overlapping zone.  
	        return lowerBound;  
	    }  
	    if ((maxNumOfPixels == -1) && (minSideLength == -1)) {  
	        return 1;  
	    } else if (minSideLength == -1) {  
	        return lowerBound;  
	    } else {  
	        return upperBound;  
	    }  
	}  
}
